esphome:
  name: sprinkle
  platform: ESP32
  board: esp32dev

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password

  power_save_mode: none
  reboot_timeout: 5min

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "sprinkle"
    password: !secret wifi_fallback_password
    ap_timeout: 2min

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
ota:


sensor:
  - platform: uptime
    name: Sprinkle Uptime
  - platform: wifi_signal
    name: Sprinkle WiFi Signal
    update_interval: 60s
  - platform: homeassistant
    id: watering_duration
    name: "Watering duration"
    entity_id: input_number.sprinkle_watering_duration
    unit_of_measurement: minutes
  - platform: homeassistant
    id: watering_duration_recycled
    name: "Watering duration (recycled)"
    entity_id: input_number.sprinkle_watering_duration_recycled
    unit_of_measurement: minutes

  - platform: template
    name: "Herbs time remaining"
    id: time_remaining_herbs
    unit_of_measurement: seconds
  - platform: template
    name: "Lavender time remaining"
    id: time_remaining_lavender
    unit_of_measurement: seconds
  - platform: template
    name: "Upper Lawn time remaining"
    id: time_remaining_upper_lawn
    unit_of_measurement: seconds
  - platform: template
    name: "Front Terrace time remaining"
    id: time_remaining_front_terrace
    unit_of_measurement: seconds
  - platform: template
    name: "Front Terrace Recycled time remaining"
    id: time_remaining_front_terrace_recycled
    unit_of_measurement: seconds
  - platform: template
    name: "Lower Lawn time remaining"
    id: time_remaining_lower_lawn
    unit_of_measurement: seconds
  - platform: template
    name: "Backyard time remaining"
    id: time_remaining_backyard
    unit_of_measurement: seconds
  - platform: template
    name: "Backyard Recycled time remaining"
    id: time_remaining_backyard_recycled
    unit_of_measurement: seconds
  - platform: template
    name: "Recycled Pump time remaining"
    id: time_remaining_recycled_pump
    unit_of_measurement: seconds


text_sensor:
  - platform: wifi_info
    ip_address:
      name: Sprinkle IP Address
    ssid:
      name: Sprinkle Connected SSID
    bssid:
      name: Sprinkle Connected BSSID
    mac_address:
      name: Sprinkle Mac Wifi Address


binary_sensor:
  - platform: status
    name: Sprinkle Status

switch:
  - platform: gpio
    pin:
      number: GPIO32
      inverted: true
    id: herbs_power
    restore_mode: ALWAYS_OFF
  - platform: gpio
    pin:
      number: GPIO33
      inverted: true
    id: lavender_power
    restore_mode: ALWAYS_OFF
  - platform: gpio
    pin:
      number: GPIO25
      inverted: true
    id: upper_lawn_power
    restore_mode: ALWAYS_OFF
  - platform: gpio
    pin:
      number: GPIO26
      inverted: true
    id: front_terrace_power
    interlock: [ front_terrace_recycled_power ]
    restore_mode: ALWAYS_OFF
  - platform: gpio
    pin:
      number: GPIO27
      inverted: true
    id: front_terrace_recycled_power
    interlock: [ front_terrace_power ]
    restore_mode: ALWAYS_OFF
    on_turn_off:
      - script.execute: maybe_turn_off_pump


  - platform: gpio
    pin:
      number: GPIO12
      inverted: true
    id: lower_lawn_power
    restore_mode: ALWAYS_OFF
  - platform: gpio
    pin:
      number: GPIO13
      inverted: true
    id: backyard_power
    interlock: [ backyard_recycled_power ]
    restore_mode: ALWAYS_OFF


  - platform: gpio
    pin:
      number: GPIO23
      inverted: true
    id: backyard_recycled_power
    interlock: [ backyard_power ]
    restore_mode: ALWAYS_OFF
    on_turn_off:
      - script.execute: maybe_turn_off_pump
  - platform: gpio
    pin:
      number: GPIO22
      inverted: true
    name: "Tree Lights"
    icon: "mdi:tree"
    restore_mode: ALWAYS_OFF

  - platform: gpio
    pin:
      number: GPIO21
      inverted: true
    id: recycled_pump_power
    restore_mode: ALWAYS_OFF

  - platform: template
    name: "Herbs"
    icon: "mdi:water"
    lambda: "return id(herbs_power).state;"
    turn_on_action:
    - switch.turn_on: herbs_power
    - script.execute: countdown_herbs
    - delay: !lambda "return id(watering_duration).state * 60 * 1000;"
    - switch.turn_off: herbs_power
    turn_off_action:
    - switch.turn_off: herbs_power
    on_turn_off:
    - script.stop: countdown_herbs
    - sensor.template.publish:
        id: time_remaining_herbs
        state: 0

  - platform: template
    name: "Lavender"
    icon: "mdi:water"
    lambda: "return id(lavender_power).state;"
    turn_on_action:
    - switch.turn_on: lavender_power
    - script.execute: countdown_lavender
    - delay: !lambda "return id(watering_duration).state * 60 * 1000;"
    - switch.turn_off: lavender_power
    turn_off_action:
    - switch.turn_off: lavender_power
    on_turn_off:
      - script.stop: countdown_lavender
      - sensor.template.publish:
          id: time_remaining_lavender
          state: 0

  - platform: template
    name: "Upper Lawn"
    icon: "mdi:water"
    lambda: "return id(upper_lawn_power).state;"
    turn_on_action:
    - switch.turn_on: upper_lawn_power
    - script.execute: countdown_upper_lawn
    - delay: !lambda "return id(watering_duration).state * 60 * 1000;"
    - switch.turn_off: upper_lawn_power
    turn_off_action:
    - switch.turn_off: upper_lawn_power
    on_turn_off:
      - script.stop: countdown_upper_lawn
      - sensor.template.publish:
          id: time_remaining_upper_lawn
          state: 0

  - platform: template
    name: "Front Terrace"
    icon: "mdi:water"
    lambda: "return id(front_terrace_power).state;"
    turn_on_action:
    - switch.turn_on: front_terrace_power
    - script.execute: countdown_front_terrace
    - delay: !lambda "return id(watering_duration).state * 60 * 1000;"
    - switch.turn_off: front_terrace_power
    turn_off_action:
    - switch.turn_off: front_terrace_power
    on_turn_off:
      - script.stop: countdown_front_terrace
      - sensor.template.publish:
          id: time_remaining_front_terrace
          state: 0

  - platform: template
    name: "Front Terrace Recycled"
    icon: "mdi:water"
    lambda: "return id(front_terrace_recycled_power).state;"
    turn_on_action:
    - switch.turn_on: front_terrace_recycled_power
    - switch.turn_on: recycled_pump_power
    - script.execute: countdown_front_terrace_recycled
    - delay: !lambda "return id(watering_duration_recycled).state * 60 * 1000;"
    - switch.turn_off: front_terrace_recycled_power
    turn_off_action:
    - switch.turn_off: front_terrace_recycled_power
    on_turn_off:
      - script.stop: countdown_front_terrace_recycled
      - sensor.template.publish:
          id: time_remaining_front_terrace_recycled
          state: 0

  - platform: template
    name: "Lower Lawn"
    icon: "mdi:water"
    lambda: "return id(lower_lawn_power).state;"
    turn_on_action:
    - switch.turn_on: lower_lawn_power
    - script.execute: countdown_lower_lawn
    - delay: !lambda "return id(watering_duration).state * 60 * 1000;"
    - switch.turn_off: lower_lawn_power
    turn_off_action:
    - switch.turn_off: lower_lawn_power
    on_turn_off:
      - script.stop: countdown_lower_lawn
      - sensor.template.publish:
          id: time_remaining_lower_lawn
          state: 0

  - platform: template
    name: "Backyard"
    icon: "mdi:water"
    lambda: "return id(backyard_power).state;"
    turn_on_action:
    - switch.turn_on: backyard_power
    - script.execute: countdown_backyard
    - delay: !lambda "return id(watering_duration).state * 60 * 1000;"
    - switch.turn_off: backyard_power
    turn_off_action:
    - switch.turn_off: backyard_power
    on_turn_off:
      - script.stop: countdown_backyard
      - sensor.template.publish:
          id: time_remaining_backyard
          state: 0

  - platform: template
    name: "Backyard Recycled"
    icon: "mdi:water"
    lambda: "return id(backyard_recycled_power).state;"
    turn_on_action:
    - switch.turn_on: backyard_recycled_power
    - switch.turn_on: recycled_pump_power
    - script.execute: countdown_backyard_recycled
    - delay: !lambda "return id(watering_duration_recycled).state * 60 * 1000;"
    - switch.turn_off: backyard_recycled_power
    turn_off_action:
    - switch.turn_off: backyard_recycled_power
    on_turn_off:
      - script.stop: countdown_backyard_recycled
      - sensor.template.publish:
          id: time_remaining_backyard_recycled
          state: 0

  - platform: template
    id: recycled_pump
    name: "Recycled Pump"
    icon: "mdi:water-pump"
    lambda: "return id(recycled_pump_power).state;"
    turn_on_action:
    - switch.turn_on: recycled_pump_power
    - script.execute: countdown_recycled_pump
    - delay: 60 minutes
    - switch.turn_off: recycled_pump_power
    turn_off_action:
    - switch.turn_off: recycled_pump_power
    on_turn_off:
    - script.stop: countdown_recycled_pump
    - sensor.template.publish:
        id: time_remaining_recycled_pump
        state: 0

globals:
  - id: herbs_time_remaining
    type: int
    restore_value: no
    initial_value: '0'
  - id: lavender_time_remaining
    type: int
    restore_value: no
    initial_value: '0'
  - id: upper_lawn_time_remaining
    type: int
    restore_value: no
    initial_value: '0'
  - id: front_terrace_time_remaining
    type: int
    restore_value: no
    initial_value: '0'
  - id: front_terrace_recycled_time_remaining
    type: int
    restore_value: no
    initial_value: '0'
  - id: lower_lawn_time_remaining
    type: int
    restore_value: no
    initial_value: '0'
  - id: backyard_time_remaining
    type: int
    restore_value: no
    initial_value: '0'
  - id: backyard_recycled_time_remaining
    type: int
    restore_value: no
    initial_value: '0'
  - id: recycled_pump_time_remaining
    type: int
    restore_value: no
    initial_value: '0'

script:
  - id: maybe_turn_off_pump
    then:
      - if:
          condition:
            and:
              - switch.is_off: front_terrace_recycled_power
              - switch.is_off: backyard_recycled_power
          then:
            - switch.turn_off: recycled_pump_power


  - id: countdown_herbs
    then:
      - lambda: 'id(herbs_time_remaining) = id(watering_duration).state * 60;'
      - while:
          condition:
            lambda: "return id(herbs_time_remaining) > 0;"
          then:
            - sensor.template.publish:
                id: time_remaining_herbs
                state: !lambda 'return id(herbs_time_remaining);'
            - delay: 10 seconds
            - lambda: "id(herbs_time_remaining) -= 10;"
  - id: countdown_lavender
    then:
      - lambda: 'id(lavender_time_remaining) = id(watering_duration).state * 60;'
      - while:
          condition:
            lambda: "return id(lavender_time_remaining) > 0;"
          then:
            - sensor.template.publish:
                id: time_remaining_lavender
                state: !lambda 'return id(lavender_time_remaining);'
            - delay: 10 seconds
            - lambda: "id(lavender_time_remaining) -= 10;"
  - id: countdown_upper_lawn
    then:
      - lambda: 'id(upper_lawn_time_remaining) = id(watering_duration).state * 60;'
      - while:
          condition:
            lambda: "return id(upper_lawn_time_remaining) > 0;"
          then:
            - sensor.template.publish:
                id: time_remaining_upper_lawn
                state: !lambda 'return id(upper_lawn_time_remaining);'
            - delay: 10 seconds
            - lambda: "id(upper_lawn_time_remaining) -= 10;"
  - id: countdown_front_terrace
    then:
      - lambda: 'id(front_terrace_time_remaining) = id(watering_duration).state * 60;'
      - while:
          condition:
            lambda: "return id(front_terrace_time_remaining) > 0;"
          then:
            - sensor.template.publish:
                id: time_remaining_front_terrace
                state: !lambda 'return id(front_terrace_time_remaining);'
            - delay: 10 seconds
            - lambda: "id(front_terrace_time_remaining) -= 10;"
  - id: countdown_front_terrace_recycled
    then:
      - lambda: 'id(front_terrace_recycled_time_remaining) = id(watering_duration_recycled).state * 60;'
      - while:
          condition:
            lambda: "return id(front_terrace_recycled_time_remaining) > 0;"
          then:
            - sensor.template.publish:
                id: time_remaining_front_terrace_recycled
                state: !lambda 'return id(front_terrace_recycled_time_remaining);'
            - delay: 10 seconds
            - lambda: "id(front_terrace_recycled_time_remaining) -= 10;"
  - id: countdown_lower_lawn
    then:
      - lambda: 'id(lower_lawn_time_remaining) = id(watering_duration).state * 60;'
      - while:
          condition:
            lambda: "return id(lower_lawn_time_remaining) > 0;"
          then:
            - sensor.template.publish:
                id: time_remaining_lower_lawn
                state: !lambda 'return id(lower_lawn_time_remaining);'
            - delay: 10 seconds
            - lambda: "id(lower_lawn_time_remaining) -= 10;"
  - id: countdown_backyard
    then:
      - lambda: 'id(backyard_time_remaining) = id(watering_duration).state * 60;'
      - while:
          condition:
            lambda: "return id(backyard_time_remaining) > 0;"
          then:
            - sensor.template.publish:
                id: time_remaining_backyard
                state: !lambda 'return id(backyard_time_remaining);'
            - delay: 10 seconds
            - lambda: "id(backyard_time_remaining) -= 10;"
  - id: countdown_backyard_recycled
    then:
      - lambda: 'id(backyard_recycled_time_remaining) = id(watering_duration_recycled).state * 60;'
      - while:
          condition:
            lambda: "return id(backyard_recycled_time_remaining) > 0;"
          then:
            - sensor.template.publish:
                id: time_remaining_backyard_recycled
                state: !lambda 'return id(backyard_recycled_time_remaining);'
            - delay: 10 seconds
            - lambda: "id(backyard_recycled_time_remaining) -= 10;"
  - id: countdown_recycled_pump
    then:
      - lambda: 'id(recycled_pump_time_remaining) = 60 * 60;'
      - while:
          condition:
            lambda: "return id(recycled_pump_time_remaining) > 0;"
          then:
            - sensor.template.publish:
                id: time_remaining_recycled_pump
                state: !lambda 'return id(recycled_pump_time_remaining);'
            - delay: 10 seconds
            - lambda: "id(recycled_pump_time_remaining) -= 10;"
