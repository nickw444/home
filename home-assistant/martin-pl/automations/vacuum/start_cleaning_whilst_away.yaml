id: "1634189664661"
alias: "robot_vacuum: start cleaning whilst away"
description: ""
trigger:
  - platform: state
    entity_id:
      - device_tracker.kates_iphone_gps
      - device_tracker.nicks_iphone_gps
    to: Dog Park
    for: "00:05:00"
    id: "zone_dog_park"
  - platform: numeric_state
    entity_id: sensor.home_nearest_distance
    above: "500"
    for: "00:05:00"
    id: proximity
condition:
  # Debounce for 2 hours
  - condition: template
    value_template: >-
      {%- if state_attr('automation.robot_vacuum_start_cleaning_whilst_away','last_triggered') == None %}
        True
      {%- else %}
        {{ (now() - state_attr('automation.robot_vacuum_start_cleaning_whilst_away','last_triggered')).total_seconds() > 60 * 60 * 2 }}
      {%- endif %}
  # Don't clean if already cleaning
  - condition: state
    entity_id: vacuum.crystal
    state: docked
  # Don't clean if away mode activated
  - condition: state
    entity_id: input_boolean.away_mode
    state: "off"
  # Don't clean if dogs are home
  - condition: state
    entity_id: group.all_animals
    state: "not_home"
action:
  # Don't clean if there is presence, wait for 15 minutes for not-home
  # state (or continue immediately if already not home)
  # TODO(NW): This might be able to be removed as GPS proximity is probably
  #  good enough
  - choose:
      - conditions:
          - condition: state
            entity_id: group.all_people
            state: "home"
        sequence:
          - wait_for_trigger:
              - platform: state
                entity_id: group.all_people
                to: not_home
            timeout: "00:15:00"
            continue_on_timeout: false
  - alias: Set up variables for the actions
    variables:
      action_cancel: "{{ 'CANCEL_' ~ context.id }}"
      action_start_now_auto: "{{ 'START_NOW_AUTO_' ~ context.id }}"
      action_start_now_deep: "{{ 'START_NOW_DEEP_' ~ context.id }}"
      action_start_now_mop: "{{ 'START_NOW_MOP_' ~ context.id }}"
  - service: notify.everyone
    data:
      title: Automated Cleaning
      message: Starting automated cleaning in 5 minutes
      data:
        tag: robovac-no-one-home
        actions:
          - action: "{{ action_cancel }}"
            title: Cancel
          - action: "{{ action_start_now_auto }}"
            title: Quick Clean
          - action: "{{ action_start_now_deep }}"
            title: Deep Clean
          - action: "{{ action_start_now_mop }}"
            title: Mop and Vacuum
  - alias: Wait for a response
    wait_for_trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: "{{ action_cancel }}"
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: "{{ action_start_now_auto }}"
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: "{{ action_start_now_deep }}"
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: "{{ action_start_now_mop }}"
    timeout: "00:05:00"
  - service: notify.everyone
    data:
      title: Automated Cleaning
      message: Starting automated cleaning
      data:
        tag: robovac-no-one-home
  - choose:
      - conditions: "{{ wait.trigger.event.data.action == action_cancel }}"
        sequence: []
      - conditions: "{{ wait.trigger.event.data.action == action_start_now_deep }}"
        sequence:
          - action: button.press
            target:
              entity_id: button.x40_ultra_shortcut_8
            data: {}
      - conditions: "{{ wait.trigger.event.data.action == action_start_now_mop }}"
        sequence:
          - action: button.press
            target:
              entity_id: button.x40_ultra_shortcut_7
            data: {}
    default:
      - action: button.press
        target:
          entity_id: button.x40_ultra_shortcut_6
        data: {}
  - alias: Wait for cleaning to finish or someone approaches home
    wait_for_trigger:
      - entity_id: vacuum.crystal
        to: docked
        id: finished
        trigger: state
      - value_template: |-
          {{ states('sensor.home_nearest_direction_of_travel') == 'towards' and
              states('sensor.home_nearest_distance') | float < 500 }}
        id: proximity
        trigger: template
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ wait.trigger.id == 'proximity' }}"
        sequence:
          - service: notify.everyone
            data:
              title: Automated Cleaning
              message: Proximity detected, ending task.
              data:
                tag: robovac-no-one-home
          - target:
              entity_id: vacuum.crystal
            data: {}
            action: vacuum.return_to_base
    default: []
mode: single
