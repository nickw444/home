template:
  - sensor:
      - name: Solar Export power
        unique_id: solar_export_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: "{{ not is_state('sensor.inverter_meter_power', 'unavailable') }}"
        state: >
          {% if states('sensor.inverter_meter_power')|float < 0 %}
            {{ states('sensor.inverter_meter_power')|float * -1 }}
          {% else %}
            0
          {% endif %}

      - name: Grid Import power
        unique_id: grid_import_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: "{{ not is_state('sensor.inverter_meter_power', 'unavailable') }}"
        state: >
          {% if states('sensor.inverter_meter_power')|float > 0 %}
            {{ states('sensor.inverter_meter_power')|float }}
          {% else %}
            0
          {% endif %}

      - name: "Solar Self Consumption power"
        unique_id: solar_self_consumption_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: "{{ not is_state('sensor.inverter_total_active_power', 'unavailable') and not is_state('sensor.inverter_meter_power', 'unavailable') }}"
        state: >
          {{ states('sensor.inverter_total_active_power')|float + [states('sensor.inverter_meter_power')|float]|min(0)  }}

      - name: "Solar Array North Angular Similarity"
        unique_id: solar_array_north_angular_similarity
        state_class: measurement
        state: >
          {% set deg2rad = pi/180 %}

          {% set sun_azi = state_attr('sun.sun', 'azimuth') | int %}
          {% set sun_ele = state_attr('sun.sun', 'elevation') | int %}

          {% set sun_x = cos(sun_azi*deg2rad)*cos(sun_ele*deg2rad) %}
          {% set sun_y = sin(sun_azi*deg2rad)*cos(sun_ele*deg2rad) %}
          {% set sun_z = sin(sun_ele*deg2rad) %}

          {% set win_azi = 347 %}
          {% set win_ele = 90 - 25 %}

          {% set win_x = cos(win_azi*deg2rad)*cos(win_ele*deg2rad) %}
          {% set win_y = sin(win_azi*deg2rad)*cos(win_ele*deg2rad) %}
          {% set win_z = sin(win_ele*deg2rad) %}

          {% set dot = sun_x*win_x + sun_y*win_y + sun_z*win_z %}
          {% set norm_win = sqrt(win_x**2 + win_y**2 + win_z**2) %}
          {% set norm_sun = sqrt(sun_x**2 + sun_y**2 + sun_z**2) %}
          {% set cos_sim = dot/(norm_win*norm_sun) %}

          {% set ang_sim = 1 - acos(cos_sim)/pi %}
          {{ ang_sim | round(3) }}

      - name: "Solar Array West Angular Similarity"
        unique_id: solar_array_west_angular_similarity
        state_class: measurement
        state: >
          {% set deg2rad = pi/180 %}

          {% set sun_azi = state_attr('sun.sun', 'azimuth') | int %}
          {% set sun_ele = state_attr('sun.sun', 'elevation') | int %}

          {% set sun_x = cos(sun_azi*deg2rad)*cos(sun_ele*deg2rad) %}
          {% set sun_y = sin(sun_azi*deg2rad)*cos(sun_ele*deg2rad) %}
          {% set sun_z = sin(sun_ele*deg2rad) %}

          {% set win_azi = 257 %}
          {% set win_ele = 90 - 10 %}

          {% set win_x = cos(win_azi*deg2rad)*cos(win_ele*deg2rad) %}
          {% set win_y = sin(win_azi*deg2rad)*cos(win_ele*deg2rad) %}
          {% set win_z = sin(win_ele*deg2rad) %}

          {% set dot = sun_x*win_x + sun_y*win_y + sun_z*win_z %}
          {% set norm_win = sqrt(win_x**2 + win_y**2 + win_z**2) %}
          {% set norm_sun = sqrt(sun_x**2 + sun_y**2 + sun_z**2) %}
          {% set cos_sim = dot/(norm_win*norm_sun) %}

          {% set ang_sim = 1 - acos(cos_sim)/pi %}
          {{ ang_sim | round(3) }}

      - name: "Solar Array North Incident Angle"
        unique_id: solar_array_north_incident_angle
        unit_of_measurement: "°"
        state_class: measurement
        state: >
          {% set solar_elevation = state_attr('sun.sun', 'elevation') | float %}
          {% set solar_azimuth = state_attr('sun.sun', 'azimuth') | float %}
          {% set panel_tilt_angle = 25 | float %}
          {% set panel_azimuth_angle = 347 | float %}

          {% set solar_elevation_rad = solar_elevation * (pi / 180) %}
          {% set panel_tilt_angle_rad = panel_tilt_angle * (pi / 180) %}
          {% set solar_azimuth_rad = solar_azimuth * (pi / 180) %}
          {% set panel_azimuth_angle_rad = panel_azimuth_angle * (pi / 180) %}

          {% set cos_incidence_angle = (sin(solar_elevation_rad) * sin(panel_tilt_angle_rad) * cos(solar_azimuth_rad - panel_azimuth_angle_rad)) + (cos(solar_elevation_rad) * cos(panel_tilt_angle_rad)) %}
          {% set incidence_angle_rad = acos(cos_incidence_angle) %}
          {% set incidence_angle_deg = incidence_angle_rad * (180 / pi) %}

          {{ incidence_angle_deg | round(2) }}

      - name: "Solar Array West Incident Angle"
        unique_id: solar_array_west_incident_angle
        unit_of_measurement: "°"
        state_class: measurement
        state: >
          {% set solar_elevation = state_attr('sun.sun', 'elevation') | float %}
          {% set solar_azimuth = state_attr('sun.sun', 'azimuth') | float %}
          {% set panel_tilt_angle = 10 | float %}
          {% set panel_azimuth_angle = 257 | float %}

          {% set solar_elevation_rad = solar_elevation * (pi / 180) %}
          {% set panel_tilt_angle_rad = panel_tilt_angle * (pi / 180) %}
          {% set solar_azimuth_rad = solar_azimuth * (pi / 180) %}
          {% set panel_azimuth_angle_rad = panel_azimuth_angle * (pi / 180) %}

          {% set cos_incidence_angle = (sin(solar_elevation_rad) * sin(panel_tilt_angle_rad) * cos(solar_azimuth_rad - panel_azimuth_angle_rad)) + (cos(solar_elevation_rad) * cos(panel_tilt_angle_rad)) %}
          {% set incidence_angle_rad = acos(cos_incidence_angle) %}
          {% set incidence_angle_deg = incidence_angle_rad * (180 / pi) %}

          {{ incidence_angle_deg | round(2) }}
    # self_consumption_less_ev_power:
    #   friendly_name: "Self Consumption Less EV power"
    #   unit_of_measurement: W
    #   value_template: >
    #     {{ states('sensor.inverter_meter_power')|float + states('sensor.inverter_total_active_power')|float - states('sensor.charger_power')|float*1000  }}
