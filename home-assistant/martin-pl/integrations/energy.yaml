utility_meter:
  mains_energy_consumed_quarterly:
    source: sensor.inverter_total_imported_energy
    unique_id: "mains_energy_consumed_quarterly"
    cycle: quarterly
    tariffs:
      - general
      - ev
  mains_energy_consumed_weekly:
    source: sensor.inverter_total_imported_energy
    unique_id: "mains_energy_consumed_weekly"
    cycle: weekly
    tariffs:
      - general
      - ev
  mains_energy_consumed_daily:
    source: sensor.inverter_total_imported_energy
    unique_id: "mains_energy_consumed_daily"
    cycle: daily
    tariffs:
      - general
      - ev

  mains_energy_exported_quarterly:
    source: sensor.inverter_total_exported_energy
    unique_id: "mains_energy_exported_quarterly"
    cycle: quarterly
  mains_energy_exported_weekly:
    source: sensor.inverter_total_exported_energy
    unique_id: "mains_energy_exported_weekly"
    cycle: weekly
  mains_energy_exported_daily:
    source: sensor.inverter_total_exported_energy
    unique_id: "mains_energy_exported_daily"
    cycle: daily

  air_conditioning_energy_consumed_quarterly:
    source: sensor.air_conditioning_energy
    unique_id: "air_conditioning_energy_consumed_quarterly"
    cycle: quarterly
    tariffs:
      - general
      - ev
  air_conditioning_energy_consumed_weekly:
    source: sensor.air_conditioning_energy
    unique_id: "air_conditioning_energy_consumed_weekly"
    cycle: weekly
    tariffs:
      - general
      - ev
  air_conditioning_energy_consumed_daily:
    source: sensor.air_conditioning_energy
    unique_id: "air_conditioning_energy_consumed_daily"
    cycle: daily
    tariffs:
      - general
      - ev

template:
  - sensor:
      - name: "Air Conditioning Power"
        unique_id: "air_conditioning_power_adjusted"
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        availability: >
          {{ has_value('sensor.air_conditioning_power_raw') }}
        state: >
          {% if states('sensor.air_conditioning_power_raw')|float|abs > 10 %}
            {{ states('sensor.air_conditioning_power_raw') }}
          {% else %}
          0
          {% endif %}

      - name: "Mains Power Instantaneous Cost"
        unique_id: "mains_power_instantaneous_cost"
        unit_of_measurement: c/h
        state_class: measurement
        availability: >
          {{ has_value('sensor.inverter_meter_power') 
            and has_value('sensor.electricity_consumption_tariff') 
            and has_value('sensor.electricity_feed_in_tariff') }}
        state: >
          {% if states('sensor.inverter_meter_power')|float >= 0 %}
          {{ (states('sensor.electricity_consumption_tariff')|float * 100 * states('sensor.inverter_meter_power')|float / 1000) | round(2) }}
          {% else %}
          {{ (states('sensor.electricity_feed_in_tariff')|float * 100 * states('sensor.inverter_meter_power')|float / 1000) | round(2) }}
          {% endif %}
      - name: "Air Conditioning Power Instantaneous Cost"
        unique_id: "air_conditioning_power_instantaneous_cost"
        unit_of_measurement: c/h
        state_class: measurement
        availability: >
          {{ has_value('sensor.inverter_meter_power')
            and has_value('sensor.air_conditioning_power') 
            and has_value('sensor.electricity_consumption_tariff') 
            and has_value('sensor.electricity_feed_in_tariff') }}
        state: >
          {% if states('sensor.inverter_meter_power')|float >= 0 %}
          {{ (states('sensor.electricity_consumption_tariff')|float * 100 * states('sensor.air_conditioning_power')|float / 1000) | round(2) }}
          {% else %}
          {{ (states('sensor.electricity_feed_in_tariff')|float * 100 * states('sensor.air_conditioning_power')|float / 1000) | round(2) }}
          {% endif %}

automation:
  - description: "energy: set consumption tariff"
    mode: single
    trigger:
      - platform: homeassistant
        event: start
      - platform: time
        at: "00:00:00"
      - platform: time
        at: "06:00:00"
    condition: []
    action:
      - choose:
          - conditions:
              - condition: time
                after: "00:00:00"
                before: "06:00:00"
            sequence:
              - service: select.select_option
                target:
                  entity_id:
                    - select.mains_energy_consumed_quarterly
                    - select.mains_energy_consumed_weekly
                    - select.mains_energy_consumed_daily
                    - select.air_conditioning_energy_consumed_quarterly
                    - select.air_conditioning_energy_consumed_weekly
                    - select.air_conditioning_energy_consumed_daily
                data:
                  option: "ev"
        default:
          - service: select.select_option
            target:
              entity_id:
                - select.mains_energy_consumed_quarterly
                - select.mains_energy_consumed_weekly
                - select.mains_energy_consumed_daily
                - select.air_conditioning_energy_consumed_quarterly
                - select.air_conditioning_energy_consumed_weekly
                - select.air_conditioning_energy_consumed_daily
            data:
              option: "general"
